#!/bin/bash

# Used to allow a pcie usb hub to be passed through to a virtual machine.

# This is a hacky little script that is unbinding the drivers from all usb devices
# on a specific set of usb hubs, then it unbinds the kernel module xhci_hcd from
# the pcie usb, finally it binds the vfio-pci kernel module to the pcie usb.

# WARNING: this will not work on other setups, if you use this make sure you read 
# through it and change all device names and id. Use lsusb and lspci to determine
# names of devices and ids.

# Usage: unbind-usb-vfio -y

if [ "$(whoami)" != "root" ]; then
	echo "Please run as root user"
	echo "Exiting..."
	exit
fi

echo "Checking driver for usb device..."
device="$(lspci | grep Fresco | awk '{print $1}')"
driver="$(lspci -s $device -nnvvv | grep 'Kernel driver' | awk '{print $5}')"
options="$1"

echo "Kernel driver in use: $driver"

if [ "$driver" == "xhci_hcd" ]; then
	echo "Driver vfio-pci is disabled"
	if [ "$options" != "-y" ]; then
		read -p "Enable vfio-pci (y/n): " choice
	else
		choice="y"
	fi
	if [ "$choice" == "y" ]; then
		# Disconnect usb devices from hub before switch driver
		if [ "$(ls -d /sys/bus/usb/devices/6-[0-9] 2> /dev/null | wc -l)" != "0" ]; then
			echo "Unbinding usb devices"
			dir=/sys/bus/usb/devices/
			cd $dir
			for dev in $(ls -d 5-[0-9]); do
				echo "Unbinding $dev"
				echo "$dev" > $dir/$dev/driver/unbind
			done
			for dev in $(ls -d 6-[0-9]); do
				echo "Unbinding $dev"
				echo "$dev" > $dir/$dev/driver/unbind
			done
		else 
			echo "No usb devices detected to unbind"
		fi
		# Disconnect the kernel module to run usb hub
		echo "Unbinding device driver xhci_hcd"
		echo 0000:04:00.0 > /sys/bus/pci/drivers/xhci_hcd/unbind
		# Switch kernel module to vfio
		echo "Binding device driver vfio-pci"
		echo 0000:04:00.0 > /sys/bus/pci/drivers/vfio-pci/bind
		driver="$(lspci -s $device -nnvvv | grep 'Kernel driver' | awk '{print $5}')"
		if [ "$driver" == "vfio-pci" ]; then
			echo "Success - new kernel driver in use: $driver"
			echo "Exiting..."
			exit
		else 
			echo "Failed - new kernel driver in use: $driver"
			echo "Exiting..."
			exit
			
		fi
	else 
		echo "Exiting..."
		exit
	fi
elif [ "$driver" == "vfio-pci" ]; then
	echo "Doing nothing..."
	echo "Exiting..."
	exit
else 
	echo "Unable to handle this situation"
	echo "Exiting..."
	exit
	
fi
		
